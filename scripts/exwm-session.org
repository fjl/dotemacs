#+TITLE: EXWM Gnome Session Setup
#+STARTUP: showall

This document describes how a useable EXWM X session can be set up to run under
gnome-session. I use this configuration with Arch Linux.

Tangling the file creates/updates all necessary files.

* EXWM Application

EXWM needs to be registered as an application so gnome-session can find it. The Exec
command runs my [[file+emacs:run-exwm.sh][EXWM startup script]].

#+BEGIN_SRC shell-script :noweb yes :tangle ~/.local/share/applications/exwm.desktop
[Desktop Entry]
Version=1.0
Type=Application
Name=EXWM
Comment=The EXWM Window Manager
NoDisplay=true
Exec=<<get-emacs-directory()>>scripts/run-exwm.sh
#+END_SRC

* XScreensaver Configuration

I use xscreensaver for screen locking.

xscreensaver doesn't ship with an application file but needs one for use by gnome-session.
I initially configured this as an autostart item but that had the side effect of also
launching xscreensaver for gnome-shell based sessions.

#+BEGIN_SRC shell-script :tangle ~/.local/share/applications/xscreensaver.desktop
[Desktop Entry]
Terminal=false
Name=XScreensaver
Type=Application
NoDisplay=true
Exec=xscreensaver -no-splash
TryExec=xscreensaver
#+END_SRC

* GNOME Session

gnome-session sessions need to be set up so it knows which applications should be started.
Obviously we want EXWM to run, but xscreensaver is also requested here.

#+BEGIN_SRC shell-script :tangle ~/.config/gnome-session/sessions/exwm.session
[GNOME Session]
Name=EXWM Session
RequiredComponents=exwm;gnome-settings-daemon;xscreensaver;notification-daemon
#+END_SRC

* X Session

The session we configured is invoked by the display manager. Per-user local sessions are
not supported (by GDM), the only location that works seems to be ~/usr/share/xsessions~.

The ~DesktopNames~ setting is stored in the environment as ~XDG_CURRENT_DESKTOP~ and is
used by application files to enable/disable themselves for certain desktop environments.

#+BEGIN_SRC shell-script :tangle /sudo::/usr/share/xsessions/gnome-exwm.session
[Desktop Entry]
Name=EXWM
Exec=gnome-session --session exwm
TryExec=/usr/bin/gnome-session
Type=Application
DesktopNames=GNOME
#+END_SRC

* Disabling The GNOME Keyring SSH Agent

The gnome-keyring ssh agent doesn't support ecdsa or ed25519 keys. Since gnome-keyring
updates the value of ~SSH_AUTH_SOCK~ in the session's environent, the only way to truly
get rid of gnome-keyring's ssh-agent is to override the autostart file.

#+BEGIN_SRC shell-script :tangle ~/.config/autostart/gnome-keyring-ssh.desktop
[Desktop Entry]
Type=Application
Name=SSH Key Agent
Exec=gnome-keyring-daemon
Hidden=true
X-GNOME-Autostart-Phase=PreDisplayServer
#+END_SRC

* GPG Agent

gpg-agent provides a nice ssh-agent replacement.

#+BEGIN_SRC shell-script :tangle ~/.config/autostart/gpg-agent.desktop
[Desktop Entry]
Type=Application
Name=GPG SSH Key Agent
Exec=gpg-agent --daemon
Terminal=false
#+END_SRC

#+BEGIN_SRC shell-script :tangle ~/.gnupg/gpg-agent.conf
enable-ssh-support
allow-emacs-pinentry
#+END_SRC

* xss-lock

[[https://bitbucket.org/raymonad/xss-lock][xss-lock]] ([[https://aur.archlinux.org/packages/xss-lock-git/][AUR package]]) is a nifty helper that listens for systemd screen lock events and
invokes the given command when such an event is fired. I use it to trigger xscreensaver.

xss-lock launched as an autostart item because it is optional.

#+BEGIN_SRC shell-script :tangle ~/.config/autostart/xss-lock.desktop
[Desktop Entry]
Exec=xss-lock -- xscreensaver-command -lock
TryExec=xss-lock
NoDisplay=true
Name=xss-lock
Type=Application
StartupNotify=false
X-GNOME-AutoRestart=true
#+END_SRC

* xcape

[[https://github.com/alols/xcape][xcape]] ([[https://aur.archlinux.org/packages/xcape/][AUR package]]) can remap modifier keys so that they behave differently
depending on whether the key is pressed alone or with another key.

I use it to [[file+emacs:xcape.sh][map space to control]]. xss-lock launched as an autostart item because it is
optional. The mapping stops working sometimes, in which case [[help:xcape-reset][the xcape-reset command]] can
bring it back.

#+BEGIN_SRC shell-script :noweb yes :tangle ~/.config/autostart/xcape.desktop
[Desktop Entry]
Name=xcape
TryExec=xcape
Exec=<<get-emacs-directory()>>scripts/run-xcape.sh
Terminal=false
Type=Application
#+END_SRC

* The Emacs Configuration Directory

For references to files in .emacs.d this snippet generates the absolute path of .emacs.d.

#+NAME: get-emacs-directory
#+BEGIN_SRC emacs-lisp
(expand-file-name user-emacs-directory)
#+END_SRC
